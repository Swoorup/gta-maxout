AsmJit - Complete x86/x64 JIT Assembler for C++ Language - Version 1.0
======================================================================

http://code.google.com/p/asmjit/

Introduction
============

AsmJit is a complete x86/x64 JIT Assembler for C++ language. It supports 32-bit
and 64-bit mode, FPU, MMX, 3dNow, SSE, SSE2, SSE3 and SSE4 through type-safe API
which mimics an Intel assembler syntax and eliminates nearly all common mistakes
which can be done by developers at compile time or run-time.

AsmJit has a high-level code generation classes which can be used as a portable
way to create JIT code. It abstracts differences caused by 32-bit/64-bit mode,
function calling conventions, and platform specific ABI.

AsmJit has been successfully tested by various C++ compilers (including MSVC, 
GCC, Clang, and BorlandC++) under all major operating systems (including Windows,
Linux and Mac). 

Features
========

  - Complete x86/x64 instruction set, including FPU, MMX, SSE, SSE2, SSE3, SSSE3
    and SSE4,
  - Compile time and run-time safety,
  - Low-level and high-level code generation,
  - Built-in CPU detection,
  - Virtual memory management,
  - Configurable memory management, logging and error handling,
  - Small and embeddable (size of compiled AsmJit is less than 200kB),
  - No dependencies on STL or other libraries,
  - No exceptions and RTTI,
  - Extensible design.

Assembler / Compiler
====================

AsmJit library contains two main code generation concepts - Assembler and Compiler.
The first concept, called Assembler, contains only interface to emit instructions
and their operands (registers, memory locations, immediates, and labels). This
class can be used by tools which do not need register allocator or contains their
own.

The second concept, called Compiler, is a high-level code generation, which uses
variables (virtual registers) instead of physical registers. After the code
serialization is finished, register allocator gathers the most important information
about the usage of variables, their scope, and registers which might be used for 
each variable. Then all variables are translated into real registers or memory
addresses. Compiler also contains built-in calling convention handling so it's
portable between 32-bit and 64-bit architectures.

The Compiler is probably not the best tool which can handle register allocation
(linear-scan register allocation is designed for fast-execution). There are some
areas where it could be improved. However, it's built-in, and in the most cases
the output is comparable to the code that is generated by the C/C++ compiler.
The main advantage of Compiler compared to other tools is that it has complete
statistics of variables and their scope, because the register allocator is run
after the code was serialized. There are also some hints which might be used to
improve the process of register allocation.

Configuring
===========

AsmJit is designed to be easily embeddable into any project. It's only needed to
add the C++ files into your project and sometimes to setup src/asmjit/config.h file.
This file contains set of C macros which can be used to configure AsmJit to use
your memory allocation functions, visibility attributes, and error handling. The
standard way to build AsmJit is to create a dynamically linked library. To build
AsmJit statically edit src/asmjit/config.h and uncomment // #define ASMJIT_API 
macro. See http://code.google.com/p/asmjit/wiki/Configuring section for details.

AsmJit contains also CMakeLists.txt which can be used by cmake to generate project
files for many platforms and compilers. If you don't know what cmake is, visit its
homepage at http://www.cmake.org.

Upgrading
=========

Please see http://code.google.com/p/asmjit/wiki/Upgrading_Notes for detailed
information about upgrading to latest AsmJit version.

Examples
========

  - AsmJit home page <http://code.google.com/p/asmjit/>,
  - AsmJit wiki <http://code.google.com/p/asmjit/w/list>,
  - AsmJit Test directory (in this package).

Directory Structure
===================

  - extras          - Extras.
  - extras/doc      - Documentation generator files.
  - extras/contrib  - Contribution (source code/headers), not official part of 
                      AsmJit.
  - scripts         - Scripts, including project generators.
  - src             - Source code
  - src/asmjit      - Public header files (always include files here!),
  - src/asmjit/core - Core files used by all AsmJit backends,
  - src/asmjit/x86  - X86 platform support and code-generation.

Supported Compilers
===================

  - BorlandC++,
  - GNU (3.4.X+, 4.0+),
  - MinGW,
  - MSVC (VC6.0, VS2005, VS2008, VS2010),
  - Other compilers require testing.

Supported Platforms
===================

Fully supported platforms at this time are X86 (32-bit) and X86_64/X64 (64-bit).
Other platforms need volunteers. Also note that AsmJit is designed to generate
assembler binary only for host CPU, don't try to generate 64-bit assembler in
32 bit mode and vica versa - this is not designed to work and will not work.

License
=======

AsmJit can be distributed under zlib license:
<http://www.opensource.org/licenses/zlib-license.php>

Google Groups and Mailing Lists
===============================

AsmJit google group:
  * http://groups.google.com/group/asmjit-dev 

AsmJit mailing list:
  * asmjit-dev@googlegroups.com 

Contact Author/Maintainer
=========================

Petr Kobalicek <kobalicek.petr@gmail.com>
