// [AsmJit/Contrib]
// Remote Context.
//
// [License]
// Zlib - See COPYING file in this package.#include <asmjit/core.h>#if defined(ASMJIT_WINDOWS)#include "remotecontext.h"namespace AsmJit {RemoteContext::RemoteContext(HANDLE hProcess) :  _hProcess(hProcess),  _memoryManager(hProcess){  // We are patching another process so set keep-virtual-memory property to   // true.  _memoryManager.setKeepVirtualMemory(true);}RemoteContext::~RemoteContext(){}uint32_t RemoteContext::generate(void** dest, Assembler* assembler);{  // Disallow empty code generation.  sysuint_t codeSize = assembler->getCodeSize();  if (codeSize == 0)  {    *dest = NULL;    return AsmJit::kErrorNoFunction;  }  // Allocate temporary memory where the code will be stored and relocated.  void* codeData = ASMJIT_MALLOC(codeSize);  if (codeData == NULL)  {    *dest = NULL;    return kErrorNoHeapMemory;  }  // Memory will be never freed, use pernament allocation.  //  // NOTE: This allocates memory of the hProcess, not our process.  void* processMemPtr = _memoryManager.alloc(codeSize, kMemAllocPermanent);  if (processMemPtr == NULL)  {    ASMJIT_FREE(codeData);    *dest = NULL;    return kErrorNoVirtualMemory;  }  // Relocate and write the code to the process memory.  assembler->relocCode(codeData, (uintptr_t)processMemPtr);  ::WriteProcessMemory(hProcess, processMemPtr, codeData, codeSize, NULL);  ASMJIT_FREE(codeData);  *dest = processMemPtr;
  return kErrorOk;}} // AsmJit namespace#endif // ASMJIT_WINDOWS